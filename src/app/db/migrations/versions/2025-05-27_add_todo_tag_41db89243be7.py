# type: ignore
"""add todo tag

Revision ID: 41db89243be7
Revises: b6185fb1f227
Create Date: 2025-05-27 03:39:15.788454+00:00

"""
from __future__ import annotations

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import EncryptedString, EncryptedText, GUID, ORA_JSONB, DateTimeUTC
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = '41db89243be7'
down_revision = 'b6185fb1f227'
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()

def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()

def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tag',
    sa.Column('id', sa.GUID(length=16), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('color', sa.String(length=100), nullable=True),
    sa.Column('user_id', sa.GUID(length=16), nullable=False),
    sa.Column('sa_orm_sentinel', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user_account.id'], name=op.f('fk_tag_user_id_user_account'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tag'))
    )
    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tag_name'), ['name'], unique=False)

    op.create_table('todo',
    sa.Column('id', sa.GUID(length=16), nullable=False),
    sa.Column('item', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=1024), nullable=False),
    sa.Column('created_time', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('plan_time', sa.DateTimeUTC(timezone=True), nullable=True),
    sa.Column('content', sa.String(length=320), nullable=False),
    sa.Column('importance', sa.Enum('NONE', 'LOW', 'MEDIUM', 'HIGH', name='importance_enum', native_enum=False), nullable=False),
    sa.Column('user_id', sa.GUID(length=16), nullable=False),
    sa.Column('sa_orm_sentinel', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user_account.id'], name=op.f('fk_todo_user_id_user_account'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_todo'))
    )
    with op.batch_alter_table('todo', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_todo_content'), ['content'], unique=False)
        batch_op.create_index(batch_op.f('ix_todo_item'), ['item'], unique=False)

    op.create_table('user_account_todo_tag',
    sa.Column('id', sa.GUID(length=16), nullable=False),
    sa.Column('todo_id', sa.GUID(length=16), nullable=False),
    sa.Column('tag_id', sa.GUID(length=16), nullable=False),
    sa.Column('sa_orm_sentinel', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], name=op.f('fk_user_account_todo_tag_tag_id_tag'), ondelete='cascade'),
    sa.ForeignKeyConstraint(['todo_id'], ['todo.id'], name=op.f('fk_user_account_todo_tag_todo_id_todo'), ondelete='cascade'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_account_todo_tag'))
    )
    with op.batch_alter_table('user_account', schema=None) as batch_op:
        batch_op.create_table_comment(
        'User accounts for application access',
        existing_comment=None
    )

    with op.batch_alter_table('user_account_oauth', schema=None) as batch_op:
        batch_op.create_table_comment(
        'Registered OAUTH2 Accounts for Users',
        existing_comment=None
    )

    with op.batch_alter_table('user_account_role', schema=None) as batch_op:
        batch_op.create_table_comment(
        'Links a user to a specific role.',
        existing_comment=None
    )

    # ### end Alembic commands ###

def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_account_role', schema=None) as batch_op:
        batch_op.drop_table_comment(
        existing_comment='Links a user to a specific role.'
    )

    with op.batch_alter_table('user_account_oauth', schema=None) as batch_op:
        batch_op.drop_table_comment(
        existing_comment='Registered OAUTH2 Accounts for Users'
    )

    with op.batch_alter_table('user_account', schema=None) as batch_op:
        batch_op.drop_table_comment(
        existing_comment='User accounts for application access'
    )

    op.drop_table('user_account_todo_tag')
    with op.batch_alter_table('todo', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_todo_item'))
        batch_op.drop_index(batch_op.f('ix_todo_content'))

    op.drop_table('todo')
    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tag_name'))

    op.drop_table('tag')
    # ### end Alembic commands ###

def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""

def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
